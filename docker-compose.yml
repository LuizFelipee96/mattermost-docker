#!/bin/bash


#!/bin/bash

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

cat << "EOF"
   _____ _   _ __  __ ______ ____  
  / ____| \ | |  \/  |  ____|  _ \ 
 | |    |  \| | \  / | |__  | |_) |
 | |    | . ` | |\/| |  __| |  _ < 
 | |____| |\  | |  | | |    | |_) |
  \_____|_| \_|_|  |_|_|    |____/ 
                                   
 Mattermost Installation Script
EOF

# Função para verificar se um comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}


# Função para imprimir mensagens de erro
error() {
    echo -e "${RED}Erro: $1${NC}" >&2
    exit 1
}

# Função para imprimir mensagens de sucesso
success() {
    echo -e "${GREEN}Sucesso: $1${NC}"
}

# Função para imprimir mensagens de aviso
warning() {
    echo -e "${YELLOW}Aviso: $1${NC}"
}

# Verificar se o Docker está instalado
if ! command -v docker &> /dev/null; then
    error "Docker não está instalado. Por favor, instale o Docker antes de continuar."
fi

# Verificar se o Docker Compose está instalado
if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose não está instalado. Por favor, instale o Docker Compose antes de continuar."
fi

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Funções para mensagens
error() {
    echo -e "${RED}Erro: $1${NC}" >&2
    exit 1
}

success() {
    echo -e "${GREEN}Sucesso: $1${NC}"
}

warning() {
    echo -e "${YELLOW}Aviso: $1${NC}"
}

# Verificar pré-requisitos
command -v docker >/dev/null 2>&1 || error "Docker não está instalado. Por favor, instale o Docker antes de continuar."
command -v docker-compose >/dev/null 2>&1 || error "Docker Compose não está instalado. Por favor, instale o Docker Compose antes de continuar."

# Remover pastas anteriores
warning "Removendo pastas anteriores..."
docker-compose down 
sudo rm -rf volumes
sudo rm -f .env docker-compose.yml



# Definir variáveis
DOMAIN="dev.cnmfs.me"
EMAIL="admin@cnmfs.me"
MATTERMOST_VERSION="7.10.0"
FOCALBOARD_VERSION="7.10.0"
POSTGRES_DB="mattermost"
ENABLE_ELASTICSEARCH=true
ENABLE_FOCALBOARD=true

# Verificar se o script está sendo executado como root
if [ "$EUID" -ne 0 ]; then
  echo "Por favor, execute este script como root ou usando sudo."
  exit 1
fi

# Função para gerar senhas aleatórias
generate_password() {
  openssl rand -base64 32 | tr -d /=+ | cut -c -16
}

# Instalar dependências
apt-get update
apt-get install -y docker.io docker-compose curl

# Criar diretórios necessários
mkdir -p config/nginx config/mattermost volumes/db volumes/mattermost/data volumes/mattermost/logs volumes/mattermost/plugins volumes/mattermost/client-plugins volumes/nginx volumes/certbot/conf volumes/certbot/www volumes/elasticsearch volumes/prometheus volumes/grafana volumes/gitlab/{config,logs,data} volumes/jenkins_home volumes/vault secrets

# Gerar senhas e salvar em arquivos de secrets
echo "mmuser" > ./secrets/db_user.txt
generate_password > ./secrets/db_password.txt
generate_password > ./secrets/grafana_admin_password.txt
generate_password > ./secrets/gitlab_root_password.txt
generate_password > ./secrets/jenkins_admin_password.txt
generate_password > ./secrets/vault_root_token.txt
generate_password > ./secrets/mattermost_smtp_password.txt

# Criar arquivo docker-compose.yml
cat > docker-compose.yml <<EOL
version: '3.7'

services:
  db:
    image: postgres:13
    container_name: mattermost-db
    environment:
      - POSTGRES_USER_FILE=/run/secrets/db_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./volumes/db:/var/lib/postgresql/data
    networks:
      - mattermost-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \$\$(cat /run/secrets/db_user) -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  mattermost:
    image: mattermost/mattermost-team-edition:${MATTERMOST_VERSION}
    container_name: mattermost
    depends_on:
      - db
    environment:
      - MM_USERNAME_FILE=/run/secrets/db_user
      - MM_PASSWORD_FILE=/run/secrets/db_password
      - MM_DBNAME=${POSTGRES_DB}
      - MM_SQLSETTINGS_DATASOURCE=postgres://\$\$(cat /run/secrets/db_user):\$\$(cat /run/secrets/db_password)@db:5432/${POSTGRES_DB}?sslmode=disable&connect_timeout=10
      - MM_SERVICESETTINGS_SITEURL=https://${DOMAIN}
      - MM_EMAILSETTINGS_SMTPSERVER=smtp.example.com
      - MM_EMAILSETTINGS_SMTPPORT=587
      - MM_EMAILSETTINGS_SMTPUSERNAME=mattermost@example.com
      - MM_EMAILSETTINGS_SMTPPASSWORD_FILE=/run/secrets/mattermost_smtp_password
      - MM_EMAILSETTINGS_ENABLESMTPAUTH=true
      - MM_EMAILSETTINGS_CONNECTIONSECURITY=TLS
    volumes:
      - ./config/mattermost:/mattermost/config
      - ./volumes/mattermost/data:/mattermost/data
      - ./volumes/mattermost/logs:/mattermost/logs
      - ./volumes/mattermost/plugins:/mattermost/plugins
      - ./volumes/mattermost/client-plugins:/mattermost/client/plugins
    networks:
      - mattermost-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8065/api/v4/system/ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  nginx:
    image: nginx:latest
    container_name: mattermost-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./volumes/nginx:/var/www/html
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/certbot
    depends_on:
      - mattermost
    networks:
      - mattermost-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  certbot:
    image: certbot/certbot
    container_name: mattermost-certbot
    volumes:
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${EMAIL} -d ${DOMAIN} --agree-tos
    depends_on:
      - nginx

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: mattermost-elasticsearch
    environment:
      - discovery.type=single-node
    volumes:
      - ./volumes/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - mattermost-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  prometheus:
    image: prom/prometheus:v2.30.3
    container_name: mattermost-prometheus
    volumes:
      - ./config/prometheus:/etc/prometheus
      - ./volumes/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - mattermost-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  grafana:
    image: grafana/grafana:8.2.2
    container_name: mattermost-grafana
    volumes:
      - ./volumes/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_admin_password
    networks:
      - mattermost-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  gitlab:
    image: gitlab/gitlab-ce:latest
    container_name: mattermost-gitlab
    hostname: gitlab.${DOMAIN}
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://gitlab.${DOMAIN}'
        gitlab_rails['initial_root_password'] = File.read('/run/secrets/gitlab_root_password').strip
    ports:
      - "8443:443"
      - "8080:80"
      - "8022:22"
    volumes:
      - ./volumes/gitlab/config:/etc/gitlab
      - ./volumes/gitlab/logs:/var/log/gitlab
      - ./volumes/gitlab/data:/var/opt/gitlab
    networks:
      - mattermost-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  jenkins:
    image: jenkins/jenkins:lts
    container_name: mattermost-jenkins
    environment:
      - JENKINS_OPTS="--argumentsRealm.passwd.admin=\$\$(cat /run/secrets/jenkins_admin_password) --argumentsRealm.roles.admin=admin"
    ports:
      - "8090:8080"
    volumes:
      - ./volumes/jenkins_home:/var/jenkins_home
    networks:
      - mattermost-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  vault:
    image: vault:1.8.3
    container_name: mattermost-vault
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID_FILE=/run/secrets/vault_root_token
    volumes:
      - ./volumes/vault:/vault/file
    command: server -dev
    networks:
      - mattermost-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  mattermost-network:
    name: mattermost-network

secrets:
  db_user:
    file: ./secrets/db_user.txt
  db_password:
    file: ./secrets/db_password.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt
  gitlab_root_password:
    file: ./secrets/gitlab_root_password.txt
  jenkins_admin_password:
    file: ./secrets/jenkins_admin_password.txt
  vault_root_token:
    file: ./secrets/vault_root_token.txt
  mattermost_smtp_password:
    file: ./secrets/mattermost_smtp_password.txt
EOL

# Criar arquivo de configuração do Nginx
cat > config/nginx/nginx.conf <<EOL
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    log_format main '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                    '\$status \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    sendfile on;
    keepalive_timeout 65;

    upstream mattermost {
        server mattermost:8065;
        keepalive 32;
    }

    server {
        listen 80;
        server_name ${DOMAIN};

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://\$server_name\$request_uri;
        }
    }

    server {
        listen 443 ssl http2;
        server_name ${DOMAIN};

        ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers off;

        add_header Strict-Transport-Security "max-age=63072000" always;

        location / {
            proxy_pass http://mattermost;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            proxy_set_header Host \$http_host;
            proxy_set_header X-Frame-Options SAMEORIGIN;
            client_max_body_size 50M;
            proxy_buffers 256 16k;
            proxy_buffer_size 16k;
            proxy_read_timeout 600s;
        }
    }
}
EOL

# Criar arquivo de configuração do Mattermost
cat > config/mattermost/config.json <<EOL
{
    "ServiceSettings": {
        "SiteURL": "https://${DOMAIN}",
        "ListenAddress": ":8065",
        "ConnectionSecurity": "",
        "TLSCertFile": "",
        "TLSKeyFile": "",
        "UseLetsEncrypt": false
    },
    "SqlSettings": {
        "DriverName": "postgres",
        "DataSource": "postgres://\${MM_USERNAME}:\${MM_PASSWORD}@db:5432/\${MM_DBNAME}?sslmode=disable&connect_timeout=10"
    },
    "LogSettings": {
        "EnableConsole": true,
        "ConsoleLevel": "INFO
